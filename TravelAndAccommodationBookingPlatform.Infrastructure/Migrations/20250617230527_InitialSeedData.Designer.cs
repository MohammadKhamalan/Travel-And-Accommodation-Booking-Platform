// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAndAccommodationBookingPlatform.Infrastructure.Data;

#nullable disable

namespace TravelAndAccommodationBookingPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250617230527_InitialSeedData")]
    partial class InitialSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityRoomType", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypesRoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "RoomTypesRoomTypeId");

                    b.HasIndex("RoomTypesRoomTypeId");

                    b.ToTable("AmenityRoomType");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoomAmenities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-0000-0000-0000-000000000001"),
                            Description = "Outdoor temperature-controlled pool",
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = new Guid("11111111-0000-0000-0000-000000000002"),
                            Description = "Full-service spa with massage treatments",
                            Name = "Spa"
                        },
                        new
                        {
                            Id = new Guid("11111111-0000-0000-0000-000000000003"),
                            Description = "24/7 business facilities with printing",
                            Name = "Business Center"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CheckInDate");

                    b.HasIndex("CheckOutDate");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", t =>
                        {
                            t.HasCheckConstraint("CK_Booking_CheckInDate", "CheckInDate >= GETDATE()");

                            t.HasCheckConstraint("CK_Booking_CheckOutDate", "CheckOutDate > CheckInDate");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-0000-0000-0000-000000000001"),
                            BookingDate = new DateTime(2025, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 2250.0,
                            RoomId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            UserId = new Guid("b2c3d4e5-2345-6789-0123-bcdef123456a")
                        },
                        new
                        {
                            Id = new Guid("33333333-0000-0000-0000-000000000002"),
                            BookingDate = new DateTime(2025, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1500.0,
                            RoomId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            UserId = new Guid("b2c3d4e5-2345-6789-0123-bcdef123456a")
                        },
                        new
                        {
                            Id = new Guid("33333333-0000-0000-0000-000000000003"),
                            BookingDate = new DateTime(2025, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 750.0,
                            RoomId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            UserId = new Guid("a1b2c3d4-1234-5678-9012-abcdef123456")
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CountryName = "United Arab Emirates",
                            Name = "Dubai",
                            PostOffice = "DXB"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CountryName = "Italy",
                            Name = "Rome",
                            PostOffice = "00100"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CountryName = "Japan",
                            Name = "Tokyo",
                            PostOffice = "100-0000"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-0000-0000-0000-000000000001"),
                            DiscountPercentage = 15f,
                            FromDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ToDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("22222222-0000-0000-0000-000000000002"),
                            DiscountPercentage = 20f,
                            FromDate = new DateTime(2025, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ToDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("22222222-0000-0000-0000-000000000003"),
                            DiscountPercentage = 10f,
                            FromDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ToDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CityId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Luxury 7-star hotel in Dubai",
                            Name = "Burj Al Arab",
                            NumberOfRooms = 202,
                            OwnerId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PhoneNumber = "+97143017666",
                            Rating = 4.8f,
                            StreetAddress = "Jumeirah Street"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CityId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Description = "Luxury hotel overlooking Rome",
                            Name = "Hotel de la Ville",
                            NumberOfRooms = 104,
                            OwnerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            PhoneNumber = "+390699671",
                            Rating = 4.6f,
                            StreetAddress = "Via Sistina 69"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CityId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Description = "Modern hotel in central Tokyo",
                            Name = "Park Hotel Tokyo",
                            NumberOfRooms = 270,
                            OwnerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            PhoneNumber = "+81332111111",
                            Rating = 4.4f,
                            StreetAddress = "1-7-1 Yurakucho"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OwnerType")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HotelId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-0000-0000-0000-000000000001"),
                            Format = "Jpg",
                            HotelId = new Guid("77777777-7777-7777-7777-777777777777"),
                            OwnerType = 0,
                            Type = "Gallery",
                            Url = "https://example.com/images/burj-al-arab.jpg"
                        },
                        new
                        {
                            Id = new Guid("66666666-0000-0000-0000-000000000002"),
                            CityId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Format = "Jpg",
                            OwnerType = 1,
                            Type = "Thumbnail",
                            Url = "https://example.com/images/dubai-city.jpg"
                        },
                        new
                        {
                            Id = new Guid("66666666-0000-0000-0000-000000000003"),
                            Format = "Png",
                            HotelId = new Guid("77777777-7777-7777-7777-777777777777"),
                            OwnerType = 0,
                            Type = "Gallery",
                            Url = "https://example.com/images/suite-room.jpg"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            DateOfBirth = new DateTime(1960, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "waddah.khamalan@hotels.com",
                            FirstName = "Waddah",
                            LastName = "Khamalan",
                            PhoneNumber = "+972598500504"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            DateOfBirth = new DateTime(1975, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "othman.shabaro@hotels.com",
                            FirstName = "Othman",
                            LastName = "shabaro",
                            PhoneNumber = "+972598400403"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            DateOfBirth = new DateTime(1955, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "salah.khamalan@hotels.com",
                            FirstName = "salah",
                            LastName = "khamalan",
                            PhoneNumber = "+972599600606"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-0000-0000-0000-000000000001"),
                            Amount = 2250.0,
                            BookingId = new Guid("33333333-0000-0000-0000-000000000001"),
                            Method = "CreditCard",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("55555555-0000-0000-0000-000000000002"),
                            Amount = 1500.0,
                            BookingId = new Guid("33333333-0000-0000-0000-000000000002"),
                            Method = "Cash",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("55555555-0000-0000-0000-000000000003"),
                            Amount = 750.0,
                            BookingId = new Guid("33333333-0000-0000-0000-000000000003"),
                            Method = "MobileWallet",
                            Status = "Refunded"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Reviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_Review_RatingRange", "[Rating] >= 0 AND [Rating] <= 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-0000-0000-0000-000000000001"),
                            BookingId = new Guid("33333333-0000-0000-0000-000000000001"),
                            Comment = "Absolutely stunning hotel with exceptional service",
                            Rating = 5f,
                            ReviewDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("44444444-0000-0000-0000-000000000002"),
                            BookingId = new Guid("33333333-0000-0000-0000-000000000002"),
                            Comment = "Great location but rooms need updating",
                            Rating = 3.5f,
                            ReviewDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("44444444-0000-0000-0000-000000000003"),
                            BookingId = new Guid("33333333-0000-0000-0000-000000000003"),
                            Comment = "Good value for money",
                            Rating = 4f,
                            ReviewDate = new DateTime(2025, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultsCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasCheckConstraint("CK_Review_RatingRange", "[Rating] >= 0 AND [Rating] <= 5")
                                .HasName("CK_Review_RatingRange1");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AdultsCapacity = 2,
                            ChildrenCapacity = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("77777777-7777-7777-7777-777777777777"),
                            Rating = 4.9f,
                            RoomTypeId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AdultsCapacity = 2,
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("88888888-8888-8888-8888-888888888888"),
                            Rating = 4.7f,
                            RoomTypeId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            AdultsCapacity = 2,
                            ChildrenCapacity = 0,
                            CreatedAt = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("99999999-9999-9999-9999-999999999999"),
                            Rating = 4.5f,
                            RoomTypeId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.RoomType", b =>
                {
                    b.Property<Guid>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PricePerNight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomTypeId");

                    b.HasIndex("RoomCategory");

                    b.ToTable("RoomTypes", t =>
                        {
                            t.HasCheckConstraint("CK_RoomType_PriceRange", "[PricePerNight] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            RoomTypeId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PricePerNight = 450.00m,
                            RoomCategory = "Suite"
                        },
                        new
                        {
                            RoomTypeId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PricePerNight = 300.00m,
                            RoomCategory = "Double"
                        },
                        new
                        {
                            RoomTypeId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            PricePerNight = 150.00m,
                            RoomCategory = "Single"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-1234-5678-9012-abcdef123456"),
                            DateOfBirth = new DateTime(1996, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hiba.alkurd@gmail.com",
                            FirstName = "Hiba",
                            LastName = "Al-kurd",
                            Password = "$2a$11$VbHe8rnLhxNSWYqPhCj.fOEii6NQdVUbDL4aafRJxxfV7k6Hrk9Qi",
                            PhoneNumber = "+972568543234",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-2345-6789-0123-bcdef123456a"),
                            DateOfBirth = new DateTime(2002, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mohammad.khamalan@example.com",
                            FirstName = "Mohammad",
                            LastName = "Khamalan",
                            Password = "$2a$11$ZEr1Cf/i8n1LUOA0jHyGVu0006On3SOWupK3D8lCWYovhlVN7ZHIy",
                            PhoneNumber = "+972598168640",
                            Role = "Guest"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-3456-7890-1234-def123456abc"),
                            DateOfBirth = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "s.wilson@hotelowner.com",
                            FirstName = "Sarah",
                            LastName = "Wilson",
                            Password = "$2a$11$9B71voUTxuNYQtLIT.XPlermee5N.OAj8z7q0gb.aDNzSlrnAhkna",
                            PhoneNumber = "+972592345654",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("AmenityRoomType", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesRoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Booking", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Discount", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.RoomType", "RoomType")
                        .WithMany("Discounts")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Hotel", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.Owner", "Owner")
                        .WithMany("Hotels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Image", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.City", "City")
                        .WithMany("Images")
                        .HasForeignKey("CityId");

                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.Hotel", "Hotel")
                        .WithMany("Images")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("City");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Payment", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("TravelAndAccommodationBookingPlatform.Core.Entities.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Review", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("TravelAndAccommodationBookingPlatform.Core.Entities.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Room", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.Hotel", "Hotel")
                        .WithMany("Room")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Core.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.City", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Hotel", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Owner", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.RoomType", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Core.Entities.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
